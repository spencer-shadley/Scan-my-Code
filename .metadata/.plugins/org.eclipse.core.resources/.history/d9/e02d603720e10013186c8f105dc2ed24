package com.feztherforeigner.hackathon.capitalone.cameratest;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.InputStreamEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import android.app.Activity;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.StrictMode;
import android.provider.MediaStore;
import android.view.View;
import android.widget.Button;


public class MainActivity extends Activity {

	static String mCurrentPhotoPath;
	Button takeAPictureBt;
	Button anotherButton;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		// get the buttons
		takeAPictureBt = (Button) findViewById(R.id.takePictureBt);
		anotherButton = (Button) findViewById(R.id.anotherButton);



		StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
		StrictMode.setThreadPolicy(policy);



		// set the onclicklisteners
		takeAPictureBt.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				// Perform action on click

				takeAPictureBt.setText("I took a picture!");

				try {
					takeAPictureBt.setText(dispatchTakePictureIntent());
				} catch (MalformedURLException e) {
					// TODO Auto-generated catch block
					takeAPictureBt.setText("malformed url exception");
				} catch (IOException e) {
					// TODO Auto-generated catch block
					takeAPictureBt.setText("IOException");
				}
				takeAPictureBt.setText(mCurrentPhotoPath);
			}
		});

		anotherButton.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				// Perform action on click
				try {
					anotherButton.setText(retrievePictureApache());
				} catch (ClientProtocolException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});
	}

	// take a picture
	static final int REQUEST_TAKE_PHOTO = 1;

	private String dispatchTakePictureIntent() throws MalformedURLException, IOException {
		Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
		// Ensure that there's a camera activity to handle the intent
		if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
			// Create the File where the photo should go
			File photoFile = null;
			try {
				photoFile = createImageFile();
			} catch (IOException ex) {
				// Error occurred while creating the File
			}
			// Continue only if the File was successfully created
			if (photoFile != null) {
				takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,
						Uri.fromFile(photoFile));
				startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);
			}

			return retrievePictureApache();
			// return sendPictureEasy();
		}
		return "uh oh";
	}

	// send the picture
	public String sendPictureEasy() throws IllegalStateException, IOException {
		String url = "http://capitalfour.herokuapp.com";
		File file = new File(Environment.getExternalStorageDirectory(),
				mCurrentPhotoPath);

		HttpClient httpclient = new DefaultHttpClient();

		HttpPost httppost = new HttpPost(url);

		InputStreamEntity reqEntity = new InputStreamEntity(
				new FileInputStream(file), -1);
		reqEntity.setContentType("binary/octet-stream");
		reqEntity.setChunked(true); // Send in multiple parts if needed
		httppost.setEntity(reqEntity);
		HttpResponse response = httpclient.execute(httppost);

		return response.getEntity().getContent().toString();
	}

	private File createImageFile() throws IOException {
		// Create an image file name
		String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
		String imageFileName = "JPEG_" + timeStamp + "_";
		File storageDir = Environment.getExternalStoragePublicDirectory(
				Environment.DIRECTORY_PICTURES);
		File image = File.createTempFile(
				imageFileName,  // prefix 
				".jpg",         // suffix 
				storageDir      // directory 
				);

		// Save a file: path for use with ACTION_VIEW intents
		mCurrentPhotoPath = image.getAbsolutePath();

		takeAPictureBt.setText("picture stored at:\n\n" + mCurrentPhotoPath);

		return image;
	}








	public void sendPictureApache() throws ClientProtocolException, IOException {


		//MultipartEntity entity = new MultipartEntity();
		//entity.addPart("file", new FileBody(new File(mCurrentPhotoPath)));

		HttpClient client = new DefaultHttpClient();
		HttpPost request = new HttpPost("http://capitalfour.herokuapp.com");

		//request.setEntity(entity);

		try {
			HttpResponse response = client.execute(request);
		} catch (ClientProtocolException e) {

		} catch (IOException e) {

		}
	}

	public String retrievePictureApache() throws ClientProtocolException, IOException {


		//MultipartEntity entity = new MultipartEntity();
		//entity.addPart("file", new FileBody(new File(mCurrentPhotoPath)));

		//		new SendImageTask().execute("http://capitalfour.herokuapps.com");

		URL url = new URL("http://capitalfour.herokuapp.com");
		HttpURLConnection con = (HttpURLConnection) url.openConnection();
		readStream(con.getInputStream());

		

		//		return response.getEntity().getContent().toString();
		return "a";
	}

	private void readStream(InputStream in) {
		BufferedReader reader = null;
		try {
			reader = new BufferedReader(new InputStreamReader(in));
			String line = "";
			while ((line = reader.readLine()) != null) {
				System.out.println(line);
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (reader != null) {
				try {
					reader.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

}
